
# QUESTION 1

        # https://www.saferproducts.gov/RestWebServices/Recall?format=json&ProductType=Phone
        # Did this!

# QUESTION 2 
# did a few rounds of practice:

import urllib.request
import json
url = 'https://www.saferproducts.gov/RestWebServices/' # Location of the API
query = 'Recall?format=json&Injury=Sprain' # The query
response = urllib.request.urlopen(url+query)
response_bytes = response.read()
data = json.loads(response_bytes) # Convert response to json
response.close()
# print(data) # print all of the data listing a sprain within the injury category

import urllib.request
import json
url = 'https://www.saferproducts.gov/RestWebServices/' # Location of the API
query = 'Recall?format=json&ProductType=Exercise' # The query
response = urllib.request.urlopen(url+query)
response_bytes = response.read()
data = json.loads(response_bytes) # Convert response to json
response.close()
# print(data) # print all of the data contained within product type exercise

# QUESTION 3

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.DataFrame.from_dict(data) # convert data from api into a dataframe
print(df['RemedyOptions'].value_counts())

'''
temp = df['RemedyOptions']
clean_values = []
for i in range(len(temp)):
    if len(temp[i])>0:
        values = []
        for j in range(len(temp[i])):
            values.append(temp[i][j]['Option'] )
        clean_values.append(values)
    else:
        clean_values.append('')
df['remedy'] = clean_values
remedy_df = df['remedy']
'''

temp = df['RemedyOptions']
clean_values = []
for i in range(len(temp)):
    if len(temp[i])==1 :
        clean_values.append( str(temp[i][0]['Option']) )
    elif len(temp[i])>1:
        countries = []
        for j in range(len(temp[i])):
            countries.append( temp[i][j]['Option'] )
        clean_values.append( str(countries) )
    else:
        clean_values.append('')
df['remedy'] = clean_values

print( "flattened dictionary:", '\n', clean_values) # not sure if this flattened the data successfully, but printed in comma-separated list
# resulted in a lot of empty values

print(df['RemedyOptions'].value_counts()) # value count table

remedy_counts = df['RemedyOptions'].value_counts()

plt.figure(figsize=(10,6)) # attempt to make a bar graph showing the different types of remedies -- this didn't work, 
# likely becasue of the way I stored the remedy options data
remedy_counts.plot(kind='bar', color='skyblue')
plt.title('Counts of Different Remedy Options')
plt.xlabel('Remedy Options')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()

plt.show()

'''
# QUESTION 4 


import requests
import streamlit as st
# Conduct analysis:
url = 'https://www.saferproducts.gov/RestWebServices/Recall'
query = '?format=json&RecallTitle=Gas'
header = {'User-Agent':
          'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0'}
raw = requests.get(url+query,headers=header)
data = raw.json()
df = pd.DataFrame.from_dict(data)
temp = df['RemedyOptions']
clean_values = []
for i in range(len(temp)):
    if len(temp[i])>0:
        values = []
        for j in range(len(temp[i])):
            values.append(temp[i][j]['Option'] )
        clean_values.append(values)
    else:
        clean_values.append('')
df['remedy'] = clean_values
remedy_counts = df['remedy'].value_counts()
# Create streamlit output:
st.title('Remedy Statistics')
st.write(remedy_counts)

# streamlit run remedy.py # had issues with this command. Commented out this code to ensure that the rest would run.

'''

# QUESTION 5

import requests # used a different method because i was having trouble using the originalmethod with this api
# kept getting a json error
base_url = "https://mhw-db.com/monsters" # this is an api which stores data for different monsters
headers = {
    "Content-Type": "application/json"
}
params = {
    "name": "Rathalos"
}
response = requests.get(base_url, headers=headers, params=params)
if response.status_code == 200:
    # Parse JSON data from the response
    monsters_data = response.json()
    for i in range(3):
     print(monsters_data) # print a little bit of the data
else:
    print(f"Failed to retrieve data. Status code: {response.status_code}")

# wrangle the data and produce EDA results
df = pd.DataFrame.from_dict(monsters_data) # convert data from api into a dataframe
print(df.columns)

df_cleaned = df.dropna() # drop null values
print(df_cleaned.head(n=2)) # print first two rows

'''

CREATE HISTOGRAM FOR DIFFERENT RARITY LEVELS OF MONSTERS -- HAD ISSUES WITH THIS
# again, i think i stored the rarity data incorrectly
rarities = []
if 'rarity' in monsters_data:
    rarities.append(monsters_data['rarity'])

# create a histogram which plots the distribution of values for monster rarity levels
plt.hist(rarities, bins=range(min(rarities), max(rarities) + 2), edgecolor='black', align='left')

plt.xlabel('Rarity Level')
plt.ylabel('Number of Monsters')
plt.title('Distribution of Monster Rarity Levels')

# Display the histogram
plt.show()

'''



